// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, CND, CP, IFL, L, PATH, PD, XE, assign, badge, debug, echo, help, info, jr, rpr, select, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'INTERFLUG/K';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PATH = require('path');

  PD = require('pipedreams');

  ({XE, $, $async, select} = PD);

  ({assign, jr} = CND);

  CP = require('child_process');

  IFL = require('../..');

  //===========================================================================================================
  // DEMOS
  //-----------------------------------------------------------------------------------------------------------
  this.$demo_compose_keys = function() {
    var collector, composing, start_compose_id, stop_compose_id;
    start_compose_id = 'null-13'; // tick ('´')
    stop_compose_id = 'null-57'; // space
    collector = [];
    composing = false;
    return $((d, send) => {
      var CLIPBOARD, _, composed_txt, i, len, ref, translations;
      if (!((select(d, '^key')) && (d.move === 'down'))) {
        return send(d);
      }
      switch (d.id) {
        case start_compose_id:
          /* flush collected characters so far */
          debug('39383', 'start_compose_id');
          composing = true;
          collector.length = 0;
          break;
        case stop_compose_id:
          composing = false;
          if (!(collector.length > 0)) {
            return send(d);
          }
          composed_txt = `${collector.join('')}`;
          translations = {
            omega: 'ω',
            Omega: 'Ω'
          };
          composed_txt = (ref = translations[composed_txt]) != null ? ref : composed_txt;
          debug('39383', 'stop_compose_id', rpr(composed_txt));
          CLIPBOARD = require('clipboardy');
          CLIPBOARD.writeSync(composed_txt);
          // IFL.copy null, collector.join ''
          this.send_backspace();
          for (i = 0, len = collector.length; i < len; i++) {
            _ = collector[i];
            this.send_backspace();
          }
          this.send_backspace();
          this.send_paste();
          collector.length = 0;
          break;
        default:
          if (composing) {
            debug('39383', 'composing');
            collector.push(d.text);
          } else {
            send(d);
          }
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.send_backspace = function() {
    // wmctrl -i -a #{S.windows.target} &&
    // xte 'usleep 250000' 'keydown Control_L' 'key v' 'keyup Control_L' &&
    // wmctrl -i -a #{S.windows.self}""".replace /\s+/gs, ' '
    // CP.execSync """xte 'keydown BackSpace' 'keyup BackSpace' 'usleep 250000'"""
    return CP.execSync("xte 'keydown BackSpace' 'keyup BackSpace'");
  };

  //-----------------------------------------------------------------------------------------------------------
  this.send_paste = function() {
    return CP.execSync("xte 'keydown Control_L' 'key v' 'keyup Control_L'");
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$emit = function() {
    return PD.$watch(function(d) {
      return XE.emit(d);
    });
  };

  XE.listen_to_all((key, d) => {
    return (d.key === '^key' ? whisper : urge)('µ52982', jr(d));
  });

  //-----------------------------------------------------------------------------------------------------------
  this.demo_keyboard_bytestream = function() {
    var pipeline, source;
    source = L._new_keyboard_bytestream();
    pipeline = [];
    pipeline.push(source);
    pipeline.push(PD.$show());
    pipeline.push(PD.$drain());
    PD.pull(...pipeline);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.demo = function() {
    return new Promise((resolve, reject) => {
      var pipeline, source;
      source = this.read_from_keyboard();
      pipeline = [];
      pipeline.push(source);
      pipeline.push(this.$demo_compose_keys());
      pipeline.push(this.$emit());
      // pipeline.push PD.$show()
      pipeline.push(PD.$drain(function() {
        return resolve();
      }));
      PD.pull(...pipeline);
      return null;
    });
  };

  //###########################################################################################################
  if (module.parent == null) {
    // f()
    L = this;
    (async function() {
      // info '23883', keyboard_mapping
      // await L.read_xmodmap()
      return (await L.demo());
    })();
  }

}).call(this);

//# sourceMappingURL=demos.js.map
